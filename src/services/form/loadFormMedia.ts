/**
 * Utility for loading media assets in the public form viewer
 */
import { useFormBuilderStore } from '@/stores/formBuilderStore';
import { FormBlock } from '@/types/block-types';
import { MediaAsset } from '@/types/media-types';
import { SlideLayout } from '@/types/layout-types';

/**
 * Extracts all media IDs used in form blocks layouts
 */
export function extractMediaIds(blocks: FormBlock[]): string[] {
  const mediaIds: string[] = [];
  
  blocks.forEach(block => {
    // Check if the block has layout settings
    if (block.settings?.layout) {
      const layout = block.settings.layout as SlideLayout;
      
      // If the layout has a mediaId, add it to the list
      if ('mediaId' in layout && layout.mediaId) {
        mediaIds.push(layout.mediaId);
      }
    }
  });
  
  // Return unique media IDs
  return [...new Set(mediaIds)];
}

/**
 * Converts a Cloudinary public ID to a MediaAsset object
 */
export function cloudinaryPublicIdToMediaAsset(publicId: string, workspaceId?: string): MediaAsset {
  // Extract the file name for display purposes (last part of the path)
  const fileName = publicId.split('/').pop() || publicId;
  
  // Determine media type based on file extension
  const isVideo = /\.(mp4|webm|mov|avi)$/i.test(fileName);
  const type = isVideo ? 'video' : 'image';
  
  // Create a MediaAsset object
  return {
    id: publicId, // Use publicId as the ID
    mediaId: publicId,
    type,
    url: '', // This will be generated by the MediaRenderer
    thumbnailUrl: '', // This will be generated by the MediaRenderer
    width: 0, // Unknown dimensions
    height: 0, // Unknown dimensions
    createdAt: new Date(),
    workspaceId,
  };
}

/**
 * Loads media assets for a form and adds them to the form builder store
 */
export async function loadFormMedia(blocks: FormBlock[], workspaceId?: string): Promise<void> {
  // Get all media IDs used in the form
  const mediaIds = extractMediaIds(blocks);
  
  if (mediaIds.length === 0) {
    return; // No media to load
  }
  
  // Get the store functions
  const { addMediaAsset } = useFormBuilderStore.getState();
  
  // Add each media asset to the store
  mediaIds.forEach(mediaId => {
    // Skip if mediaId is invalid
    if (!mediaId) return;
    
    // Create a MediaAsset object from the public ID
    const mediaAsset = cloudinaryPublicIdToMediaAsset(mediaId, workspaceId);
    
    // Add the asset to the store
    addMediaAsset(mediaAsset);
  });
  
  console.log(`[loadFormMedia] Loaded ${mediaIds.length} media assets for form viewer`);
}
